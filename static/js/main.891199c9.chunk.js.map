{"version":3,"sources":["components/CamCard.jsx","App.jsx","serviceWorker.js","index.js"],"names":["colors","CamCard","props","react_default","a","createElement","Card","color","Math","floor","random","length","fluid","Content","style","margin","padding","Header","model","float","Icon","name","className","onClick","onClose","onExpand","Description","Embed","active","url","concat","AdblockerMessage","Message","warning","textAlign","width","App","state","models","modelToAdd","fullScreenModel","isFullScreen","onCamClose","currentModels","Object","toConsumableArray","_this","splice","indexOf","setState","onCamExpand","onCamCompress","handleAddFormChange","e","target","value","handleAddFormSubmit","preventDefault","_this2","this","size","id","Container","App_AdblockerMessage","Button","icon","labelPosition","href","marginBottom","Form","onSubmit","Group","Input","placeholder","onChange","required","Grid","centered","map","Column","key","mobile","computer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.891199c9.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Card, Icon, Embed } from 'semantic-ui-react';\n\nconst colors = ['red', 'orange', 'yellow', 'olive', 'green', 'teal', 'blue', 'violet', 'purple', 'pink', 'brown', 'grey'];\n\nconst getRandomColor = () => {\n    return colors[Math.floor(Math.random() * colors.length)];\n}\n\nexport default props => (\n    <Card color={ getRandomColor() } fluid>\n        <Card.Content style={{ margin: 0, padding: 0 }}>\n            <Card.Header style={{ padding: 15 }}>\n                { props.model }\n\n                <div style={{ float: 'right' }}>\n                    <Icon name='close' className='button' onClick={ () => { props.onClose(props.model) } } />\n                    <Icon name='expand arrows alternate' className='button' onClick={ () => { props.onExpand(props.model) } } />\n                </div>\n            </Card.Header>\n\n            <Card.Description style={{ margin: 0, padding: 0 }}>\n                <Embed active={true} url={ `https://chaturbate.com/in/?track=embed&tour=dU9X&campaign=zVn1b&signup_notice=0&b=${ props.model }&disable_sound=1&mobileRedirect=never` } />\n            </Card.Description>\n        </Card.Content>\n    </Card>\n)","import React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\n\nimport { Container, Grid, Header, Message, Form, Button, Embed, Icon } from 'semantic-ui-react';\n\nimport CamCard from './components/CamCard';\n\nconst AdblockerMessage = () => (\n  <Message warning style={{ textAlign: 'center', width: '100%' }}>\n    <Message.Header>WARNING</Message.Header>\n\n    <p>Adblockers may cause website to not work properly!</p>\n  </Message>\n)\n\nclass App extends React.Component {\n  state = {\n    models: [],\n    modelToAdd: '',\n    fullScreenModel: null,\n    isFullScreen: false\n  };\n\n  onCamClose = model => {\n    let currentModels = [...this.state.models];\n\n    currentModels.splice(currentModels.indexOf(model), 1);\n\n    this.setState({\n      models: currentModels\n    });\n  }\n\n  onCamExpand = model => {\n    this.setState({\n      fullScreenModel: model,\n      isFullScreen: true\n    });\n  }\n\n  onCamCompress = () => {\n    this.setState({\n      fullScreenModel: '',\n      isFullScreen: false\n    });\n  }\n\n  handleAddFormChange = e => {\n    this.setState({\n      modelToAdd: e.target.value\n    });\n  }\n\n  handleAddFormSubmit = e => {\n    e.preventDefault();\n\n    this.setState({\n      models: [...this.state.models, this.state.modelToAdd],\n      modelToAdd: ''\n    });\n  }\n\n  render() {\n    if(this.state.isFullScreen) {\n      return (\n        <div>\n          <Embed active={true} url={ `https://chaturbate.com/in/?track=embed&tour=dU9X&campaign=zVn1b&signup_notice=0&b=${ this.state.fullScreenModel }&disable_sound=1&mobileRedirect=never` } />\n          <Icon name='close' size='big' className='closeBtn' onClick={ this.onCamCompress } />\n        </div>\n      );\n    }\n\n    return (\n      <div id=\"app\">\n        <Container fluid>\n          <AdblockerMessage />\n\n          <Header size='huge'>Multibate</Header>\n\n          <Button icon labelPosition='right' href='https://chaturbate.com/in/?track=multibate&tour=NwNd&campaign=zVn1b' target='_blank' style={{ marginBottom: '2em' }}>\n            <Icon name='video' />\n            Broadcast\n          </Button>\n\n          <Button icon labelPosition='right' href='https://chaturbate.com/in/?track=multibate&tour=3Mc9&campaign=zVn1b&redirect_to_room=-welcomepage-' target='_blank' style={{ marginBottom: '2em' }}>\n            <Icon name='user' />\n            CB Sign Up\n          </Button>\n\n          <Form id='addForm' onSubmit={ this.handleAddFormSubmit }>\n            <Form.Group>\n              <Form.Input placeholder='Chaturbate Username' name='username' value={ this.state.modelToAdd } onChange={ this.handleAddFormChange } required />\n              <Form.Button icon='add' />\n            </Form.Group>\n          </Form>\n\n          <Grid centered>\n            {\n                this.state.models.map(model => (\n                  <Grid.Column key={ model } mobile={16} computer={8}>\n                    <CamCard model={ model } onClose={ this.onCamClose } onExpand={ this.onCamExpand } />\n                  </Grid.Column>\n                ))\n            }\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}